{
  "version": 4,
  "terraform_version": "0.12.6",
  "serial": 40,
  "lineage": "806c4db2-f933-6b92-ff56-afedadc05020",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "ecs_service_int",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": null,
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-1:937787653866:stack/teknikio-stack-int/8c686390-0995-11ea-81b8-0eba1c1b0c34",
            "name": "teknikio-stack-int",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {},
            "parameters": {
              "ContainerMemory": "1024",
              "ContainerPort": "3232",
              "ImageUrl": "937787653866.dkr.ecr.us-east-1.amazonaws.com/teknikio-int:latest",
              "ServiceName": "teknikio-service-int",
              "StackName": "teknikio-vpc-stack-int",
              "UseSSL": "true"
            },
            "policy_body": null,
            "policy_url": null,
            "tags": {},
            "template_body": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a public load balancer.\nParameters:\n  StackName:\n    Type: String\n    Default: production\n    Description: The name of the parent Fargate networking stack that you created. Necessary\n      to locate and reference resources created by that stack.\n  ServiceName:\n    Type: String\n    Default: nginx\n    Description: A name for the service\n  ImageUrl:\n    Type: String\n    Default: nginx\n    Description: The url of a docker image that contains the application process that\n      will handle the traffic for this service\n  ContainerPort:\n    Type: Number\n    Default: 80\n    Description: What port number the application inside the docker container is binding to\n  ContainerCpu:\n    Type: Number\n    Default: 256\n    Description: How much CPU to give the container. 1024 is 1 CPU\n  ContainerMemory:\n    Type: Number\n    Default: 512\n    Description: How much memory in megabytes to give the container\n  Path:\n    Type: String\n    Default: \"*\"\n    Description: A path on the public load balancer that this service\n      should be connected to. Use * to send all load balancer\n      traffic to this service.\n  Priority:\n    Type: Number\n    Default: 1\n    Description: The priority for the routing rule added to the load balancer.\n      This only applies if your have multiple services which have been\n      assigned to different paths on the load balancer.\n  DesiredCount:\n    Type: Number\n    Default: 2\n    Description: How many copies of the service task to run\n  Role:\n    Type: String\n    Default: \"\"\n    Description: (Optional) An IAM role to give the service's containers if the code within needs to\n      access other AWS resources like S3 buckets, DynamoDB tables, etc\n  UseSSL:\n    Type: String\n    Default: \"false\"\n    Description: (Optional) Whether to use SSL (Https)\n  ApplicationSecret:\n    Type: String\n    Default: \"\"\n    Description: (Optional) Application secret required to run service\n\nConditions:\n  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]\n  UseHTTPS: !Equals [!Ref 'UseSSL', \"true\"]\n\nResources:\n\n  # The task definition. This is a simple metadata description of what\n  # container to run, and what resource requirements it has.\n  TaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: !Ref 'ServiceName'\n      Cpu: !Ref 'ContainerCpu'\n      Memory: !Ref 'ContainerMemory'\n      NetworkMode: awsvpc\n      RequiresCompatibilities:\n        - FARGATE\n      ExecutionRoleArn:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]\n      TaskRoleArn:\n        Fn::If:\n          - 'HasCustomRole'\n          - !Ref 'Role'\n          - !Ref \"AWS::NoValue\"\n      ContainerDefinitions:\n        - Name: !Ref 'ServiceName'\n          Cpu: !Ref 'ContainerCpu'\n          Memory: !Ref 'ContainerMemory'\n          Image: !Ref 'ImageUrl'\n          PortMappings:\n            - ContainerPort: !Ref 'ContainerPort'\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref CloudWatchLogsGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: \"ecs\"\n          Environment: [{\n                          \"Name\": \"APPLICATION_SECRET\",\n                          \"Value\": !Ref ApplicationSecret\n                        }]\n\n  CloudWatchLogsGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref AWS::StackName\n      RetentionInDays: 365\n\n  # The service. The service is a resource which allows you to run multiple\n  # copies of a type of task, and gather up their logs and metrics, as well\n  # as monitor the number of running tasks and replace any that have crashed\n  Service:\n    Type: AWS::ECS::Service\n    DependsOn: LoadBalancerRule\n    Properties:\n      ServiceName: !Ref 'ServiceName'\n      Cluster:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'ClusterName']]\n      LaunchType: FARGATE\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 75\n      DesiredCount: !Ref 'DesiredCount'\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: ENABLED\n          SecurityGroups:\n            - Fn::ImportValue:\n                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]\n          Subnets:\n            - Fn::ImportValue:\n                !Join [':', [!Ref 'StackName', 'PublicSubnetOne']]\n            - Fn::ImportValue:\n                !Join [':', [!Ref 'StackName', 'PublicSubnetTwo']]\n      TaskDefinition: !Ref 'TaskDefinition'\n      LoadBalancers:\n        - ContainerName: !Ref 'ServiceName'\n          ContainerPort: !Ref 'ContainerPort'\n          TargetGroupArn: !Ref 'TargetGroup'\n\n  # A target group. This is used for keeping track of all the tasks, and\n  # what IP addresses / port numbers they have. You can query it yourself,\n  # to use the addresses yourself, but most often this target group is just\n  # connected to an application load balancer, or network load balancer, so\n  # it can automatically distribute traffic across all the targets.\n  TargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 15\n      HealthyThresholdCount: 2\n      TargetType: ip\n      Name: !Ref 'ServiceName'\n      Port: !Ref 'ContainerPort'\n      Protocol: HTTP\n      UnhealthyThresholdCount: 2\n      Matcher:\n        HttpCode: '200-399'\n      VpcId:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'VPCId']]\n\n  PublicLoadBalancerListener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref 'TargetGroup'\n          Type: 'forward'\n      LoadBalancerArn:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'PublicLoadBalancer']]\n      Port: !Ref 'ContainerPort'\n      Protocol: HTTP\n\n  # Create a rule on the load balancer for routing traffic to the target group\n  LoadBalancerRule:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      Actions:\n        - TargetGroupArn: !Ref 'TargetGroup'\n          Type: 'forward'\n      Conditions:\n        - Field: path-pattern\n          Values: [!Ref 'Path']\n      ListenerArn:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'PublicListener']]\n      Priority: !If [UseHTTPS, 3, !Ref 'Priority']\n\n  # IF HTTPS Forward HTTP to HTTPS\n  LoadBalancerHTTPForwardRule:\n    Condition: UseHTTPS\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      Actions:\n        - RedirectConfig:\n            Host: \"#{host}\"\n            Path: \"/#{path}\"\n            Port: 443\n            Protocol: \"HTTPS\"\n            Query: \"#{query}\"\n            StatusCode: HTTP_301\n          Type: 'redirect'\n      Conditions:\n        - Field: path-pattern\n          Values: [!Ref 'Path']\n      ListenerArn:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'PublicListener']]\n      Priority: 2\n\n  # IF HTTPS routing to ECS TargetGroup\n  LoadBalancerHTTPSRule:\n    Condition: UseHTTPS\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      Actions:\n        - TargetGroupArn: !Ref 'TargetGroup'\n          Type: 'forward'\n      Conditions:\n        - Field: path-pattern\n          Values: [!Ref 'Path']\n      ListenerArn:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'PublicListenerHTTPS']]\n      Priority: !Ref 'Priority'\n",
            "template_url": null,
            "timeout_in_minutes": null,
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19",
          "depends_on": [
            "aws_cloudformation_stack.vpc_int"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "ecs_service_prod",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": null,
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-1:937787653866:stack/teknikio-stack-prod/2f71c130-0996-11ea-8f33-0e3259ee6b3b",
            "name": "teknikio-stack-prod",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {},
            "parameters": {
              "ContainerMemory": "1024",
              "ContainerPort": "3232",
              "DesiredCount": "3",
              "ImageUrl": "937787653866.dkr.ecr.us-east-1.amazonaws.com/teknikio-prod:latest",
              "ServiceName": "teknikio-service-prod",
              "StackName": "teknikio-vpc-stack-prod",
              "UseSSL": "true"
            },
            "policy_body": null,
            "policy_url": null,
            "tags": {},
            "template_body": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a public load balancer.\nParameters:\n  StackName:\n    Type: String\n    Default: production\n    Description: The name of the parent Fargate networking stack that you created. Necessary\n      to locate and reference resources created by that stack.\n  ServiceName:\n    Type: String\n    Default: nginx\n    Description: A name for the service\n  ImageUrl:\n    Type: String\n    Default: nginx\n    Description: The url of a docker image that contains the application process that\n      will handle the traffic for this service\n  ContainerPort:\n    Type: Number\n    Default: 80\n    Description: What port number the application inside the docker container is binding to\n  ContainerCpu:\n    Type: Number\n    Default: 256\n    Description: How much CPU to give the container. 1024 is 1 CPU\n  ContainerMemory:\n    Type: Number\n    Default: 512\n    Description: How much memory in megabytes to give the container\n  Path:\n    Type: String\n    Default: \"*\"\n    Description: A path on the public load balancer that this service\n      should be connected to. Use * to send all load balancer\n      traffic to this service.\n  Priority:\n    Type: Number\n    Default: 1\n    Description: The priority for the routing rule added to the load balancer.\n      This only applies if your have multiple services which have been\n      assigned to different paths on the load balancer.\n  DesiredCount:\n    Type: Number\n    Default: 2\n    Description: How many copies of the service task to run\n  Role:\n    Type: String\n    Default: \"\"\n    Description: (Optional) An IAM role to give the service's containers if the code within needs to\n      access other AWS resources like S3 buckets, DynamoDB tables, etc\n  UseSSL:\n    Type: String\n    Default: \"false\"\n    Description: (Optional) Whether to use SSL (Https)\n  ApplicationSecret:\n    Type: String\n    Default: \"\"\n    Description: (Optional) Application secret required to run service\n\nConditions:\n  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]\n  UseHTTPS: !Equals [!Ref 'UseSSL', \"true\"]\n\nResources:\n\n  # The task definition. This is a simple metadata description of what\n  # container to run, and what resource requirements it has.\n  TaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: !Ref 'ServiceName'\n      Cpu: !Ref 'ContainerCpu'\n      Memory: !Ref 'ContainerMemory'\n      NetworkMode: awsvpc\n      RequiresCompatibilities:\n        - FARGATE\n      ExecutionRoleArn:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]\n      TaskRoleArn:\n        Fn::If:\n          - 'HasCustomRole'\n          - !Ref 'Role'\n          - !Ref \"AWS::NoValue\"\n      ContainerDefinitions:\n        - Name: !Ref 'ServiceName'\n          Cpu: !Ref 'ContainerCpu'\n          Memory: !Ref 'ContainerMemory'\n          Image: !Ref 'ImageUrl'\n          PortMappings:\n            - ContainerPort: !Ref 'ContainerPort'\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref CloudWatchLogsGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: \"ecs\"\n          Environment: [{\n                          \"Name\": \"APPLICATION_SECRET\",\n                          \"Value\": !Ref ApplicationSecret\n                        }]\n\n  CloudWatchLogsGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref AWS::StackName\n      RetentionInDays: 365\n\n  # The service. The service is a resource which allows you to run multiple\n  # copies of a type of task, and gather up their logs and metrics, as well\n  # as monitor the number of running tasks and replace any that have crashed\n  Service:\n    Type: AWS::ECS::Service\n    DependsOn: LoadBalancerRule\n    Properties:\n      ServiceName: !Ref 'ServiceName'\n      Cluster:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'ClusterName']]\n      LaunchType: FARGATE\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 75\n      DesiredCount: !Ref 'DesiredCount'\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: ENABLED\n          SecurityGroups:\n            - Fn::ImportValue:\n                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]\n          Subnets:\n            - Fn::ImportValue:\n                !Join [':', [!Ref 'StackName', 'PublicSubnetOne']]\n            - Fn::ImportValue:\n                !Join [':', [!Ref 'StackName', 'PublicSubnetTwo']]\n      TaskDefinition: !Ref 'TaskDefinition'\n      LoadBalancers:\n        - ContainerName: !Ref 'ServiceName'\n          ContainerPort: !Ref 'ContainerPort'\n          TargetGroupArn: !Ref 'TargetGroup'\n\n  # A target group. This is used for keeping track of all the tasks, and\n  # what IP addresses / port numbers they have. You can query it yourself,\n  # to use the addresses yourself, but most often this target group is just\n  # connected to an application load balancer, or network load balancer, so\n  # it can automatically distribute traffic across all the targets.\n  TargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 15\n      HealthyThresholdCount: 2\n      TargetType: ip\n      Name: !Ref 'ServiceName'\n      Port: !Ref 'ContainerPort'\n      Protocol: HTTP\n      UnhealthyThresholdCount: 2\n      Matcher:\n        HttpCode: '200-399'\n      VpcId:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'VPCId']]\n\n  PublicLoadBalancerListener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref 'TargetGroup'\n          Type: 'forward'\n      LoadBalancerArn:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'PublicLoadBalancer']]\n      Port: !Ref 'ContainerPort'\n      Protocol: HTTP\n\n  # Create a rule on the load balancer for routing traffic to the target group\n  LoadBalancerRule:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      Actions:\n        - TargetGroupArn: !Ref 'TargetGroup'\n          Type: 'forward'\n      Conditions:\n        - Field: path-pattern\n          Values: [!Ref 'Path']\n      ListenerArn:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'PublicListener']]\n      Priority: !If [UseHTTPS, 3, !Ref 'Priority']\n\n  # IF HTTPS Forward HTTP to HTTPS\n  LoadBalancerHTTPForwardRule:\n    Condition: UseHTTPS\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      Actions:\n        - RedirectConfig:\n            Host: \"#{host}\"\n            Path: \"/#{path}\"\n            Port: 443\n            Protocol: \"HTTPS\"\n            Query: \"#{query}\"\n            StatusCode: HTTP_301\n          Type: 'redirect'\n      Conditions:\n        - Field: path-pattern\n          Values: [!Ref 'Path']\n      ListenerArn:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'PublicListener']]\n      Priority: 2\n\n  # IF HTTPS routing to ECS TargetGroup\n  LoadBalancerHTTPSRule:\n    Condition: UseHTTPS\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      Actions:\n        - TargetGroupArn: !Ref 'TargetGroup'\n          Type: 'forward'\n      Conditions:\n        - Field: path-pattern\n          Values: [!Ref 'Path']\n      ListenerArn:\n        Fn::ImportValue:\n          !Join [':', [!Ref 'StackName', 'PublicListenerHTTPS']]\n      Priority: !Ref 'Priority'\n",
            "template_url": null,
            "timeout_in_minutes": null,
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19",
          "depends_on": [
            "aws_cloudformation_stack.vpc_prod"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "vpc_int",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": [
              "CAPABILITY_AUTO_EXPAND",
              "CAPABILITY_NAMED_IAM"
            ],
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-1:937787653866:stack/teknikio-vpc-stack-int/db33e7b0-0896-11ea-a60f-0ed4cff9b69d",
            "name": "teknikio-vpc-stack-int",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {
              "ClusterName": "teknikio-cluster-int",
              "ECSRole": "arn:aws:iam::937787653866:role/teknikio-vpc-stack-int-ECSRole-1IPWZKI46ZD4F",
              "ECSTaskExecutionRole": "arn:aws:iam::937787653866:role/teknikio-ecs-execution-role-int",
              "ExternalUrl": "http://tekni-Publi-X5SUSOJQKU3B-628411975.us-east-1.elb.amazonaws.com",
              "FargateContainerSecurityGroup": "sg-08f7653e928b1c728",
              "PublicListener": "arn:aws:elasticloadbalancing:us-east-1:937787653866:listener/app/tekni-Publi-X5SUSOJQKU3B/fe7536d436ba2b95/e9d2bef6dbccac41",
              "PublicListenerHTTPS": "arn:aws:elasticloadbalancing:us-east-1:937787653866:listener/app/tekni-Publi-X5SUSOJQKU3B/fe7536d436ba2b95/07fdf5fc931fe199",
              "PublicLoadBalancer": "arn:aws:elasticloadbalancing:us-east-1:937787653866:loadbalancer/app/tekni-Publi-X5SUSOJQKU3B/fe7536d436ba2b95",
              "PublicSubnetOne": "subnet-02b13ae8ebe407711",
              "PublicSubnetTwo": "subnet-020c3ac4d431add8d",
              "VPCId": "vpc-0205e38c0be1d06fd"
            },
            "parameters": {
              "ClusterName": "teknikio-cluster-int",
              "ExecutionRoleName": "teknikio-ecs-execution-role-int",
              "LoadBalancerCertificateArn": "arn:aws:acm:us-east-1:937787653866:certificate/e8a15f53-0056-48e8-b4c1-7c255cd3a862"
            },
            "policy_body": null,
            "policy_url": null,
            "tags": {},
            "template_body": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: A stack for deploying containerized applications in AWS Fargate.\n  This stack runs containers in a public VPC subnet, and includes a\n  public facing load balancer to register the services in.\n\nParameters:\n  ClusterName:\n    Type: String\n    Description: Name of the ECS cluster to be created\n  ExecutionRoleName:\n    Type: String\n    Description: Name of the IAM role used by the ECS tasks to be created\n  LoadBalancerCertificateArn:\n    Description: 'Optional Amazon Resource Name (ARN) of the certificate to associate with the load balancer.'\n    Type: String\n    Default: ''\n\nConditions:\n  HasLoadBalancerCertificateArn: !Not [!Equals [!Ref LoadBalancerCertificateArn, '']]\n\nMappings:\n  # Hard values for the subnet masks. These masks define\n  # the range of internal IP addresses that can be assigned.\n  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255\n  # There are two subnets which cover the ranges:\n  #\n  # 10.0.0.0 - 10.0.0.255\n  # 10.0.1.0 - 10.0.1.255\n  #\n  # If you need more IP addresses (perhaps you have so many\n  # instances that you run out) then you can customize these\n  # ranges to add more\n  SubnetConfig:\n    VPC:\n      CIDR: '10.0.0.0/16'\n    PublicOne:\n      CIDR: '10.0.0.0/24'\n    PublicTwo:\n      CIDR: '10.0.1.0/24'\nResources:\n  # VPC in which containers will be networked.\n  # It has two public subnets\n  # We distribute the subnets across the first two available subnets\n  # for the region, for high availability.\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']\n\n  # Two public subnets, where containers can have public IP addresses\n  PublicSubnetOne:\n    Type: AWS::EC2::Subnet\n    Properties:\n      AvailabilityZone:\n        Fn::Select:\n          - 0\n          - Fn::GetAZs: {Ref: 'AWS::Region'}\n      VpcId: !Ref 'VPC'\n      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']\n      MapPublicIpOnLaunch: true\n  PublicSubnetTwo:\n    Type: AWS::EC2::Subnet\n    Properties:\n      AvailabilityZone:\n        Fn::Select:\n          - 1\n          - Fn::GetAZs: {Ref: 'AWS::Region'}\n      VpcId: !Ref 'VPC'\n      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']\n      MapPublicIpOnLaunch: true\n\n  # Setup networking resources for the public subnets. Containers\n  # in the public subnets have public IP addresses and the routing table\n  # sends network traffic via the internet gateway.\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n  GatewayAttachement:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref 'VPC'\n      InternetGatewayId: !Ref 'InternetGateway'\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref 'VPC'\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: GatewayAttachement\n    Properties:\n      RouteTableId: !Ref 'PublicRouteTable'\n      DestinationCidrBlock: '0.0.0.0/0'\n      GatewayId: !Ref 'InternetGateway'\n  PublicSubnetOneRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnetOne\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnetTwoRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnetTwo\n      RouteTableId: !Ref PublicRouteTable\n\n  # ECS Resources\n  ECSCluster:\n    Type: AWS::ECS::Cluster\n    Properties:\n      # Fix a name to avoid having an auto-generated one\n      ClusterName: !Ref 'ClusterName'\n\n  # A security group for the containers we will run in Fargate.\n  # Two rules, allowing network traffic from a public facing load\n  # balancer and from other members of the security group.\n  #\n  # Remove any of the following ingress rules that are not needed.\n  # If you want to make direct requests to a container using its\n  # public IP address you'll need to add a security group rule\n  # to allow traffic from all IP addresses.\n  FargateContainerSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Access to the Fargate containers\n      VpcId: !Ref 'VPC'\n  EcsSecurityGroupIngressFromPublicALB:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      Description: Ingress from the public ALB\n      GroupId: !Ref 'FargateContainerSecurityGroup'\n      IpProtocol: -1\n      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'\n  EcsSecurityGroupIngressFromSelf:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      Description: Ingress from other containers in the same security group\n      GroupId: !Ref 'FargateContainerSecurityGroup'\n      IpProtocol: -1\n      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'\n\n  # Load balancers for getting traffic to containers.\n  # This sample template creates one load balancer:\n  #\n  # - One public load balancer, hosted in public subnets that is accessible\n  #   to the public, and is intended to route traffic to one or more public\n  #   facing services.\n\n  # A public facing load balancer, this is used for accepting traffic from the public\n  # internet and directing it to public facing microservices\n  PublicLoadBalancerSG:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Access to the public facing load balancer\n      VpcId: !Ref 'VPC'\n      SecurityGroupIngress:\n        # Allow access to ALB from anywhere on the internet\n        - CidrIp: 0.0.0.0/0\n          IpProtocol: -1\n  PublicLoadBalancer:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Scheme: internet-facing\n      LoadBalancerAttributes:\n        - Key: idle_timeout.timeout_seconds\n          Value: '30'\n      Subnets:\n        # The load balancer is placed into the public subnets, so that traffic\n        # from the internet can reach the load balancer directly via the internet gateway\n        - !Ref PublicSubnetOne\n        - !Ref PublicSubnetTwo\n      SecurityGroups: [!Ref 'PublicLoadBalancerSG']\n  # A dummy target group is used to setup the ALB to just drop traffic\n  # initially, before any real service target groups have been added.\n  DummyTargetGroupPublic:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 100\n      HealthCheckPath: /\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 60\n      HealthyThresholdCount: 2\n      Name: !Join ['-', [!Ref 'AWS::StackName', 'drop-1']]\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 2\n      VpcId: !Ref 'VPC'\n  PublicLoadBalancerListener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    DependsOn:\n      - PublicLoadBalancer\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'\n          Type: 'forward'\n      LoadBalancerArn: !Ref 'PublicLoadBalancer'\n      Port: 80\n      Protocol: HTTP\n\n  PublicLoadBalancerListenerHTTPS:\n    Condition: HasLoadBalancerCertificateArn\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    DependsOn:\n      - PublicLoadBalancer\n    Properties:\n      Certificates:\n        - CertificateArn: !Ref LoadBalancerCertificateArn\n      DefaultActions:\n        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'\n          Type: 'forward'\n      LoadBalancerArn: !Ref 'PublicLoadBalancer'\n      Port: 443\n      Protocol: HTTPS\n\n\n  # This is an IAM role which authorizes ECS to manage resources on your\n  # account on your behalf, such as updating your load balancer with the\n  # details of where your containers are, so that traffic can reach your\n  # containers.\n  ECSRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: [ecs.amazonaws.com]\n            Action: ['sts:AssumeRole']\n      Path: /\n      Policies:\n        - PolicyName: ecs-service\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  # Rules which allow ECS to attach network interfaces to instances\n                  # on your behalf in order for awsvpc networking mode to work right\n                  - 'ec2:AttachNetworkInterface'\n                  - 'ec2:CreateNetworkInterface'\n                  - 'ec2:CreateNetworkInterfacePermission'\n                  - 'ec2:DeleteNetworkInterface'\n                  - 'ec2:DeleteNetworkInterfacePermission'\n                  - 'ec2:Describe*'\n                  - 'ec2:DetachNetworkInterface'\n\n                  # Rules which allow ECS to update load balancers on your behalf\n                  # with the information sabout how to send traffic to your containers\n                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'\n                  - 'elasticloadbalancing:DeregisterTargets'\n                  - 'elasticloadbalancing:Describe*'\n                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'\n                  - 'elasticloadbalancing:RegisterTargets'\n                Resource: '*'\n\n  # This is a role which is used by the ECS tasks themselves.\n  ECSTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: [ecs-tasks.amazonaws.com]\n            Action: ['sts:AssumeRole']\n      Path: /\n      Policies:\n        - PolicyName: AmazonECSTaskExecutionRolePolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  # Allow the ECS Tasks to download images from ECR\n                  - 'ecr:GetAuthorizationToken'\n                  - 'ecr:BatchCheckLayerAvailability'\n                  - 'ecr:GetDownloadUrlForLayer'\n                  - 'ecr:BatchGetImage'\n\n                  # Allow the ECS tasks to upload logs to CloudWatch\n                  - 'logs:CreateLogStream'\n                  - 'logs:PutLogEvents'\n                Resource: '*'\n      RoleName: !Ref 'ExecutionRoleName'\n\n# These are the values output by the CloudFormation template. Be careful\n# about changing any of them, because of them are exported with specific\n# names so that the other task related CF templates can use them.\nOutputs:\n  ClusterName:\n    Description: The name of the ECS cluster\n    Value: !Ref 'ECSCluster'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]\n  ExternalUrl:\n    Description: The url of the external load balancer\n    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ExternalUrl' ] ]\n  ECSRole:\n    Description: The ARN of the ECS role\n    Value: !GetAtt 'ECSRole.Arn'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSRole' ] ]\n  ECSTaskExecutionRole:\n    Description: The ARN of the ECS role\n    Value: !GetAtt 'ECSTaskExecutionRole.Arn'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskExecutionRole' ] ]\n  PublicListener:\n    Description: The ARN of the public load balancer's Listener\n    Value: !Ref PublicLoadBalancerListener\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicListener' ] ]\n  PublicListenerHTTPS:\n    Condition: HasLoadBalancerCertificateArn\n    Description: The ARN of the public load balancer's Listener\n    Value: !Ref PublicLoadBalancerListenerHTTPS\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicListenerHTTPS' ] ]\n  VPCId:\n    Description: The ID of the VPC that this stack is deployed in\n    Value: !Ref 'VPC'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]\n  PublicSubnetOne:\n    Description: Public subnet one\n    Value: !Ref 'PublicSubnetOne'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]\n  PublicSubnetTwo:\n    Description: Public subnet two\n    Value: !Ref 'PublicSubnetTwo'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]\n  FargateContainerSecurityGroup:\n    Description: A security group used to allow Fargate containers to receive traffic\n    Value: !Ref 'FargateContainerSecurityGroup'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'FargateContainerSecurityGroup' ] ]\n  PublicLoadBalancer:\n    Description: The load balancer\n    Value: !Ref 'PublicLoadBalancer'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicLoadBalancer' ] ]\n",
            "template_url": null,
            "timeout_in_minutes": null,
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "vpc_prod",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": [
              "CAPABILITY_AUTO_EXPAND",
              "CAPABILITY_NAMED_IAM"
            ],
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-1:937787653866:stack/teknikio-vpc-stack-prod/db354740-0896-11ea-8abe-0e3038696552",
            "name": "teknikio-vpc-stack-prod",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {
              "ClusterName": "teknikio-cluster-prod",
              "ECSRole": "arn:aws:iam::937787653866:role/teknikio-vpc-stack-prod-ECSRole-1FQ0BBXBIHAY7",
              "ECSTaskExecutionRole": "arn:aws:iam::937787653866:role/teknikio-ecs-execution-role-prod",
              "ExternalUrl": "http://tekni-Publi-SMUDMX2HBF9Y-97085655.us-east-1.elb.amazonaws.com",
              "FargateContainerSecurityGroup": "sg-0d9611150cc727f43",
              "PublicListener": "arn:aws:elasticloadbalancing:us-east-1:937787653866:listener/app/tekni-Publi-SMUDMX2HBF9Y/9c83dad5eacf3b18/d73d07d09d6932ae",
              "PublicListenerHTTPS": "arn:aws:elasticloadbalancing:us-east-1:937787653866:listener/app/tekni-Publi-SMUDMX2HBF9Y/9c83dad5eacf3b18/72c60d03667966a4",
              "PublicLoadBalancer": "arn:aws:elasticloadbalancing:us-east-1:937787653866:loadbalancer/app/tekni-Publi-SMUDMX2HBF9Y/9c83dad5eacf3b18",
              "PublicSubnetOne": "subnet-0f352bc3138cc28f2",
              "PublicSubnetTwo": "subnet-0b44e1b4f7d14ce55",
              "VPCId": "vpc-009d1ca0dc70291a4"
            },
            "parameters": {
              "ClusterName": "teknikio-cluster-prod",
              "ExecutionRoleName": "teknikio-ecs-execution-role-prod",
              "LoadBalancerCertificateArn": "arn:aws:acm:us-east-1:937787653866:certificate/e8a15f53-0056-48e8-b4c1-7c255cd3a862"
            },
            "policy_body": null,
            "policy_url": null,
            "tags": {},
            "template_body": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: A stack for deploying containerized applications in AWS Fargate.\n  This stack runs containers in a public VPC subnet, and includes a\n  public facing load balancer to register the services in.\n\nParameters:\n  ClusterName:\n    Type: String\n    Description: Name of the ECS cluster to be created\n  ExecutionRoleName:\n    Type: String\n    Description: Name of the IAM role used by the ECS tasks to be created\n  LoadBalancerCertificateArn:\n    Description: 'Optional Amazon Resource Name (ARN) of the certificate to associate with the load balancer.'\n    Type: String\n    Default: ''\n\nConditions:\n  HasLoadBalancerCertificateArn: !Not [!Equals [!Ref LoadBalancerCertificateArn, '']]\n\nMappings:\n  # Hard values for the subnet masks. These masks define\n  # the range of internal IP addresses that can be assigned.\n  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255\n  # There are two subnets which cover the ranges:\n  #\n  # 10.0.0.0 - 10.0.0.255\n  # 10.0.1.0 - 10.0.1.255\n  #\n  # If you need more IP addresses (perhaps you have so many\n  # instances that you run out) then you can customize these\n  # ranges to add more\n  SubnetConfig:\n    VPC:\n      CIDR: '10.0.0.0/16'\n    PublicOne:\n      CIDR: '10.0.0.0/24'\n    PublicTwo:\n      CIDR: '10.0.1.0/24'\nResources:\n  # VPC in which containers will be networked.\n  # It has two public subnets\n  # We distribute the subnets across the first two available subnets\n  # for the region, for high availability.\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']\n\n  # Two public subnets, where containers can have public IP addresses\n  PublicSubnetOne:\n    Type: AWS::EC2::Subnet\n    Properties:\n      AvailabilityZone:\n        Fn::Select:\n          - 0\n          - Fn::GetAZs: {Ref: 'AWS::Region'}\n      VpcId: !Ref 'VPC'\n      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']\n      MapPublicIpOnLaunch: true\n  PublicSubnetTwo:\n    Type: AWS::EC2::Subnet\n    Properties:\n      AvailabilityZone:\n        Fn::Select:\n          - 1\n          - Fn::GetAZs: {Ref: 'AWS::Region'}\n      VpcId: !Ref 'VPC'\n      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']\n      MapPublicIpOnLaunch: true\n\n  # Setup networking resources for the public subnets. Containers\n  # in the public subnets have public IP addresses and the routing table\n  # sends network traffic via the internet gateway.\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n  GatewayAttachement:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref 'VPC'\n      InternetGatewayId: !Ref 'InternetGateway'\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref 'VPC'\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: GatewayAttachement\n    Properties:\n      RouteTableId: !Ref 'PublicRouteTable'\n      DestinationCidrBlock: '0.0.0.0/0'\n      GatewayId: !Ref 'InternetGateway'\n  PublicSubnetOneRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnetOne\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnetTwoRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnetTwo\n      RouteTableId: !Ref PublicRouteTable\n\n  # ECS Resources\n  ECSCluster:\n    Type: AWS::ECS::Cluster\n    Properties:\n      # Fix a name to avoid having an auto-generated one\n      ClusterName: !Ref 'ClusterName'\n\n  # A security group for the containers we will run in Fargate.\n  # Two rules, allowing network traffic from a public facing load\n  # balancer and from other members of the security group.\n  #\n  # Remove any of the following ingress rules that are not needed.\n  # If you want to make direct requests to a container using its\n  # public IP address you'll need to add a security group rule\n  # to allow traffic from all IP addresses.\n  FargateContainerSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Access to the Fargate containers\n      VpcId: !Ref 'VPC'\n  EcsSecurityGroupIngressFromPublicALB:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      Description: Ingress from the public ALB\n      GroupId: !Ref 'FargateContainerSecurityGroup'\n      IpProtocol: -1\n      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'\n  EcsSecurityGroupIngressFromSelf:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      Description: Ingress from other containers in the same security group\n      GroupId: !Ref 'FargateContainerSecurityGroup'\n      IpProtocol: -1\n      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'\n\n  # Load balancers for getting traffic to containers.\n  # This sample template creates one load balancer:\n  #\n  # - One public load balancer, hosted in public subnets that is accessible\n  #   to the public, and is intended to route traffic to one or more public\n  #   facing services.\n\n  # A public facing load balancer, this is used for accepting traffic from the public\n  # internet and directing it to public facing microservices\n  PublicLoadBalancerSG:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Access to the public facing load balancer\n      VpcId: !Ref 'VPC'\n      SecurityGroupIngress:\n        # Allow access to ALB from anywhere on the internet\n        - CidrIp: 0.0.0.0/0\n          IpProtocol: -1\n  PublicLoadBalancer:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Scheme: internet-facing\n      LoadBalancerAttributes:\n        - Key: idle_timeout.timeout_seconds\n          Value: '30'\n      Subnets:\n        # The load balancer is placed into the public subnets, so that traffic\n        # from the internet can reach the load balancer directly via the internet gateway\n        - !Ref PublicSubnetOne\n        - !Ref PublicSubnetTwo\n      SecurityGroups: [!Ref 'PublicLoadBalancerSG']\n  # A dummy target group is used to setup the ALB to just drop traffic\n  # initially, before any real service target groups have been added.\n  DummyTargetGroupPublic:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 100\n      HealthCheckPath: /\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 60\n      HealthyThresholdCount: 2\n      Name: !Join ['-', [!Ref 'AWS::StackName', 'drop-1']]\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 2\n      VpcId: !Ref 'VPC'\n  PublicLoadBalancerListener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    DependsOn:\n      - PublicLoadBalancer\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'\n          Type: 'forward'\n      LoadBalancerArn: !Ref 'PublicLoadBalancer'\n      Port: 80\n      Protocol: HTTP\n\n  PublicLoadBalancerListenerHTTPS:\n    Condition: HasLoadBalancerCertificateArn\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    DependsOn:\n      - PublicLoadBalancer\n    Properties:\n      Certificates:\n        - CertificateArn: !Ref LoadBalancerCertificateArn\n      DefaultActions:\n        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'\n          Type: 'forward'\n      LoadBalancerArn: !Ref 'PublicLoadBalancer'\n      Port: 443\n      Protocol: HTTPS\n\n\n  # This is an IAM role which authorizes ECS to manage resources on your\n  # account on your behalf, such as updating your load balancer with the\n  # details of where your containers are, so that traffic can reach your\n  # containers.\n  ECSRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: [ecs.amazonaws.com]\n            Action: ['sts:AssumeRole']\n      Path: /\n      Policies:\n        - PolicyName: ecs-service\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  # Rules which allow ECS to attach network interfaces to instances\n                  # on your behalf in order for awsvpc networking mode to work right\n                  - 'ec2:AttachNetworkInterface'\n                  - 'ec2:CreateNetworkInterface'\n                  - 'ec2:CreateNetworkInterfacePermission'\n                  - 'ec2:DeleteNetworkInterface'\n                  - 'ec2:DeleteNetworkInterfacePermission'\n                  - 'ec2:Describe*'\n                  - 'ec2:DetachNetworkInterface'\n\n                  # Rules which allow ECS to update load balancers on your behalf\n                  # with the information sabout how to send traffic to your containers\n                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'\n                  - 'elasticloadbalancing:DeregisterTargets'\n                  - 'elasticloadbalancing:Describe*'\n                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'\n                  - 'elasticloadbalancing:RegisterTargets'\n                Resource: '*'\n\n  # This is a role which is used by the ECS tasks themselves.\n  ECSTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: [ecs-tasks.amazonaws.com]\n            Action: ['sts:AssumeRole']\n      Path: /\n      Policies:\n        - PolicyName: AmazonECSTaskExecutionRolePolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  # Allow the ECS Tasks to download images from ECR\n                  - 'ecr:GetAuthorizationToken'\n                  - 'ecr:BatchCheckLayerAvailability'\n                  - 'ecr:GetDownloadUrlForLayer'\n                  - 'ecr:BatchGetImage'\n\n                  # Allow the ECS tasks to upload logs to CloudWatch\n                  - 'logs:CreateLogStream'\n                  - 'logs:PutLogEvents'\n                Resource: '*'\n      RoleName: !Ref 'ExecutionRoleName'\n\n# These are the values output by the CloudFormation template. Be careful\n# about changing any of them, because of them are exported with specific\n# names so that the other task related CF templates can use them.\nOutputs:\n  ClusterName:\n    Description: The name of the ECS cluster\n    Value: !Ref 'ECSCluster'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]\n  ExternalUrl:\n    Description: The url of the external load balancer\n    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ExternalUrl' ] ]\n  ECSRole:\n    Description: The ARN of the ECS role\n    Value: !GetAtt 'ECSRole.Arn'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSRole' ] ]\n  ECSTaskExecutionRole:\n    Description: The ARN of the ECS role\n    Value: !GetAtt 'ECSTaskExecutionRole.Arn'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskExecutionRole' ] ]\n  PublicListener:\n    Description: The ARN of the public load balancer's Listener\n    Value: !Ref PublicLoadBalancerListener\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicListener' ] ]\n  PublicListenerHTTPS:\n    Condition: HasLoadBalancerCertificateArn\n    Description: The ARN of the public load balancer's Listener\n    Value: !Ref PublicLoadBalancerListenerHTTPS\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicListenerHTTPS' ] ]\n  VPCId:\n    Description: The ID of the VPC that this stack is deployed in\n    Value: !Ref 'VPC'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]\n  PublicSubnetOne:\n    Description: Public subnet one\n    Value: !Ref 'PublicSubnetOne'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]\n  PublicSubnetTwo:\n    Description: Public subnet two\n    Value: !Ref 'PublicSubnetTwo'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]\n  FargateContainerSecurityGroup:\n    Description: A security group used to allow Fargate containers to receive traffic\n    Value: !Ref 'FargateContainerSecurityGroup'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'FargateContainerSecurityGroup' ] ]\n  PublicLoadBalancer:\n    Description: The load balancer\n    Value: !Ref 'PublicLoadBalancer'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicLoadBalancer' ] ]\n",
            "template_url": null,
            "timeout_in_minutes": null,
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ecr_repository",
      "name": "service-repository-int",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ecr:us-east-1:937787653866:repository/teknikio-int",
            "id": "teknikio-int",
            "image_scanning_configuration": [
              {
                "scan_on_push": false
              }
            ],
            "image_tag_mutability": "MUTABLE",
            "name": "teknikio-int",
            "registry_id": "937787653866",
            "repository_url": "937787653866.dkr.ecr.us-east-1.amazonaws.com/teknikio-int",
            "tags": {},
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxMjAwMDAwMDAwMDAwfX0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ecr_repository",
      "name": "service-repository-prod",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ecr:us-east-1:937787653866:repository/teknikio-prod",
            "id": "teknikio-prod",
            "image_scanning_configuration": [
              {
                "scan_on_push": false
              }
            ],
            "image_tag_mutability": "MUTABLE",
            "name": "teknikio-prod",
            "registry_id": "937787653866",
            "repository_url": "937787653866.dkr.ecr.us-east-1.amazonaws.com/teknikio-prod",
            "tags": {},
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxMjAwMDAwMDAwMDAwfX0="
        }
      ]
    }
  ]
}
